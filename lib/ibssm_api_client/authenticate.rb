module IbssmApiClient
  class Authenticate < Base
    
    # Communicates with ibssm.org to authenticate the user. If authentication is
    # successful, the user token generated by ibssm.org is returned. A 403 status code
    # is returned otherwise. 
    # TODO: refactor connection exception blocks
    def authenticate
      begin
        user = IbssmApiClient.username
        password = IbssmApiClient.password
        assert_credentials(user,password)
        
        uri = URI.parse(base_url+'auth/SignIn')
        http = Net::HTTP.new(uri.host,uri.port)
        #http.use_ssl = true unless !Rails.env.production?
        request = Net::HTTP::Post.new(uri.request_uri)
        request.set_form_data({"username" => user, "password" => password})
        response = http.request(request)
      rescue Errno::ECONNREFUSED
        IbssmApiClient.logger.info "Connection to IBSSM API refused"
        raise IbssmApiError
      rescue Timeout::Error
        IbssmApiClient.logger.info "Connection to IBSSM API timed out"
        raise IbssmApiError
      rescue Net::ProtocolError
        IbssmApiClient.logger.info "Net::Protocol Error with connection to IBSSM API (1)"
        raise IbssmApiError
      rescue IOError
        IbssmApiClient.logger.info "IOError with connection to IBSSM API (2)"
        raise IbssmApiError
      rescue Net::HTTPBadResponse
        IbssmApiClient.logger.info "Net::HttpBadResponse with connection to IBSSM API (3)"
        raise IbssmApiError
      end      
      debug_response(response)
      set_token(response['X-Response-Token'])
      return response['X-Response-Token']
    end
    
    # Returns information about the authenticated user.
    # token: the student's authentication token
    def user_information
      path = 'auth/UserInformation'
      return get_data(path,@@token,'?token=' + @@token.to_s)
    end
    
    private
    
    def assert_credentials(user,password)
      raise IbssmAuthenticationError("Please set the iBSSM API username and password in your initializer file.") unless !user.blank? && !password.blank?
    end
    
  end
end